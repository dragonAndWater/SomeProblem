面向对象设计-设计原则
   1.单一职责原则：设计目单一的类（降低耦合性）
   2.开放-封闭原则：对扩展开发，对修改封闭（不改原来的代码，用新的类来扩展）
   3.李氏替换原则：子类可以替换父类（父类有的，子类都有，在子类上进行重载）
   4.依赖倒置原则：要依赖于抽象，而不是具体实现；针对接口编程，不要针对实现编程
   5.接口隔离原则：使用多个专门的接口比使用单一的总接口要好（一个接口只有一个作用）
   6.组合重用原则：要尽量使用组合，而不是继承关系达到重用目的（继承是紧耦合关系，父类变，子类跟着变）
   7.迪米特原则（最少知识法则）：一个对象应当对其他对象有尽可能少的了解（一般用封装来实现）

面向对象设计-设计模式：主要关注软件系统的设计，与具体的实现语言无关
    架构模式：房子的整体框架，房子外形，几个房间、几个楼梯
    设计模式：每个房间的具体设计，哪儿放床、哪儿放灯

面向对象设计-设计模式的分类
    创建型模式：创建对象（用new 不能满足）
            工厂方法模式-factory
            抽象工厂模式-abstract factory
            原型模式-prototype
            单例模式-singleton
            构建器模式-builder
    结构型模式：类和对象的组合
             适配器模式-adapter
             桥接模式-bridge
             组合模式-composite
             装饰模式-decorator
             外观模式-facade
             享元模式-flyweight
             代理模式-proxy
    行为型模式：描述类（对象）的交互情况，及其职责的分配情况
            职责链模式-chain of responsibility
            命令模式-command
            解释器模式-interpreter
            迭代器模式-iterator
            中介者模式-mediator
            备忘录模式-memento
            观察者模式-observer
            状态模式-state
            策略模式-strategy
            模板方法模式-template method
            访问者模式-visitor


创建型模式--抽象工程模式：
            提供一个接口，可以创建一系列相关或相互依赖的对象，无需指定他们具体的类
          构建器模式：
            将一个复杂类的表示与其构造相分离，使得相同的构建过程能够得出不同的表示
          工厂方法：
            定义一个创建对象的接口，但由子类决定要实例化哪一个类。工工厂方法使得子类实例化的过程推迟
          原型模式：（克隆模型）
            用原型实例指定创建对象的类型，并且通过拷贝这个原型来创建新的对象（用new创建对象消耗的资源更多，用拷贝效率高）
          单例模式：
            保证一个类只有一个实例，并提供一个访问它的全局访问点（无论在系统那个地方调用它，都是这个实例对象）








